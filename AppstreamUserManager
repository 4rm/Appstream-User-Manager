import os
import json
import pandas as  pd
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog

class MainApplication(tk.Frame):
    def __init__(self, parent, *args, **kwargs):
        tk.Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        root.title('AWS Batch User Management')
        print('Loading existing users')
        self.df=''
        self.clist=[]

        def openFile(self):
            self.roster_location=filedialog.askopenfilename(title = "Select roster",
                                                            filetypes = (("CSV","*.csv"),
                                                                         ("all files","*.*")))
            try:
                self.UserFrame.destroy()
            except:
                pass
            self.df=pd.read_csv(self.roster_location)
            self.names=self.df.Subject[2:].reset_index(drop=True).values.tolist()
            self.usernames=[item[0] for item in self.df[['Title']][2:].reset_index(drop=True).values.tolist()]
            self.UserFrame=UserFrame(self)
            self.UserFrame.pack(side=tk.LEFT)
            root.update()
            print("Roster loaded")

        def openDir(self):
            self.roster_dir=filedialog.askdirectory()
            try:
                self.UserFrame.destroy()
            except:
                pass
            files=os.listdir(self.roster_dir)
            files_xlsx=[file for file in files if file[-3:]=='csv']
            self.df=pd.DataFrame()
            for i in files_xlsx:
                self.df = self.df.append(pd.read_csv(self.roster_dir+'/'+i, skiprows=range(1,3)))
            self.names=self.df.Subject.reset_index(drop=True).values.tolist()
            self.usernames=[item[0] for item in self.df[['Title']].reset_index(drop=True).values.tolist()]
            self.UserFrame=UserFrame(self)
            self.UserFrame.pack(side=tk.LEFT)
            root.update()
            print("Rosters loaded")
            
            
        def update():
            self.UserFrame.destroy()
            self.UserFrame=UserFrame(self)
            self.UserFrame.pack(side=tk.LEFT)

        def addUsers(self):
            for i in range(len(self.usernames)):
                command='aws appstream create-user --user-name ' + self.usernames[i] + ' --first-name "'+ ' '.join(self.names[i].split(' ')[1:]) +'" --last-name "'+ self.names[i].split(' ')[0] +'" --authentication-type USERPOOL --region us-east-1'
                os.system(command)
                self.user_name_list.append(self.usernames[i])
                print("User account created: " + self.usernames[i])
            print('Done!\n')
            update()
                
        def delUsers(self):
            for i in range(len(self.usernames)):
                command='aws appstream delete-user --user-name ' + self.usernames[i] + ' --authentication-type USERPOOL --region us-east-1'
                os.system(command)
                try:
                    self.user_name_list.remove(self.usernames[i])
                    print("User account deleted: " +  self.usernames[i])
                except:
                    pass
            print('Done!\n')
            update()

        def checklist(self, name):
            if name not in self.clist:
                self.clist.append(name)
            else:
                self.clist.remove(name)

        def associate(self):
            for j in range(len(self.usernames)):
                for i in range(len(self.clist)):
                    command='aws appstream batch-associate-user-stack --user-stack-associations=StackName='+self.clist[i]+',UserName='+self.usernames[j]+',SendEmailNotification=true,AuthenticationType=USERPOOL > log'
                    os.system(command)
                    print('User ' + self.usernames[j] + ' associated with stack ' + self.clist[i].rstrip())
                if len(self.clist)>1: print('')
            print('Done!\n')

        def disassociate(self):
            for j in range(len(self.usernames)):
                for i in range(len(self.clist)):
                    command='aws appstream batch-disassociate-user-stack --user-stack-associations=StackName='+self.clist[i]+',UserName='+self.usernames[j]+',AuthenticationType=USERPOOL > log'
                    os.system(command)
                    print('User ' + self.usernames[j] + ' disassociated with stack ' + self.clist[i].rstrip())
                if len(self.clist)>1: print('')
            print('Done!\n')
            
        self.all_users=json.loads(os.popen('aws appstream describe-users --authentication-type USERPOOL --region us-east-1').read())['Users']
        self.user_name_list=[]
        for i in range(len(self.all_users)):
            self.user_name_list.append(self.all_users[i]['UserName'])
        print('Existing users loaded')
        menubar = tk.Menu(root)
        menubar.add_command(label="Open File", command=lambda:openFile(self))
        menubar.add_command(label="Open directory", command=lambda:openDir(self))
        self.UserFrame=UserFrame(self)
        self.UserFrame.pack(side=tk.LEFT)

        button_frame=tk.Frame(self)
        button_frame.pack(padx=5, pady=5, side=tk.RIGHT, anchor=tk.N)
        add_users_button=tk.Button(button_frame, text='Add Users', command=lambda:addUsers(self), width=15)
        add_users_button.pack()
        delete_users_button=tk.Button(button_frame, text='Delete Users', command=lambda:delUsers(self), width=15)
        delete_users_button.pack()

        stack_frame=tk.Frame(button_frame, relief=tk.RIDGE, borderwidth=2)
        stack_frame.pack(padx=3, pady=8)
        describe_stacks_raw=os.popen('aws appstream describe-stacks').read()
        describe_stacks_json=json.loads(describe_stacks_raw)
        for i in range(len(describe_stacks_json['Stacks'])):
            checkbox=tk.Checkbutton(stack_frame, text=describe_stacks_json['Stacks'][i]['Name'], command=lambda i=i:checklist(self, describe_stacks_json['Stacks'][i]['Name']))
            checkbox.pack(anchor=tk.W)
        add_stack_button=tk.Button(stack_frame, text="Associate", command=lambda:associate(self), width=10)
        add_stack_button.pack(side=tk.LEFT, anchor=tk.W)
        remove_stack_button=tk.Button(stack_frame, text="Disassociate", command=lambda:disassociate(self), width=10)
        remove_stack_button.pack(side=tk.LEFT, anchor=tk.E)
        
        root.config(menu=menubar)

class UserFrame(tk.Frame):
    def __init__(self, parent, *args, **kwargs):
        tk.Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent

        user_list=ttk.Treeview(self, height=20)
        user_list.pack(side=tk.LEFT)

        scrl_bar=ttk.Scrollbar(self, orient='vertical', command=user_list.yview)
        scrl_bar.pack(side='right', fill='y')

        user_list.configure(yscrollcommand=scrl_bar.set)

        user_list['columns']=("one", "two", "three")
        user_list.column('#0', width=100)
        user_list.column('one', width=100)
        user_list.column('two', width=200)
        user_list.column('three', width=50)
        user_list.heading("#0", text="First name", anchor=tk.W)
        user_list.heading("one", text="Last name", anchor=tk.W)
        user_list.heading("two", text="Username", anchor=tk.W)
        user_list.heading("three", text="Exists", anchor=tk.W)
        if len(parent.df)>0:
            for item in range(len(parent.usernames)):
                if parent.usernames[item] in parent.user_name_list:
                    values=(parent.names[item].split(' ')[0], parent.usernames[item], 'y')
                else:
                    values=(parent.names[item].split(' ')[0], parent.usernames[item])
                user_list.insert('','end',text=' '.join(parent.names[item].split(' ')[1:]),values=values)
        
if __name__ == "__main__":
    root=tk.Tk()
    MainApplication(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
